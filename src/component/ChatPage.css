/* const User = require('../models/User');
const Conversation = require('../models/Conversation');
const Message = require('../models/Message');
const Notification = require('../models/Notification');
const { emitSocketEvent } = require('../utils/socket');

// Search users

const { Profile } = require('../models/Profile');
const path = require('path');

// 🔍 Enhanced searchUsers controller with profilePhotoUrl support
exports.searchUsers = async (req, res) => {
  try {
    const query = req.query.query;
    if (!query) {
      return res.status(400).json({ message: 'Query parameter is required' });
    }

    const regex = new RegExp(query, 'i'); // Case-insensitive search

    const users = await User.find({
      $or: [{ name: regex }, { email: regex }]
    }).select('_id name email role').lean();

    const enrichedUsers = await Promise.all(users.map(async (user) => {
      const profile = await Profile.findOne({ userId: user._id }).lean();
      const profilePhotoUrl = profile?.profilePhoto
        ? `/uploads/profile/${path.basename(profile.profilePhoto)}`
        : '/default-profile.jpg';

      return {
        ...user,
        profilePhotoUrl
      };
    }));

    res.status(200).json({ users: enrichedUsers });
  } catch (error) {
    console.error('❌ Error in searchUsers:', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
};


// Get conversations

exports.getConversations = async (req, res) => {
  try {
    const userId = req.user._id;
    const conversations = await Conversation.find({ participants: userId })
      .populate({
        path: "participants",
        select: "name email role",
      })
      .populate({
        path: "lastMessage",
        populate: { path: "sender", select: "name" },
      })
      .lean();

    const enhancedConversations = await Promise.all(
      conversations.map(async (conversation) => {
        const enrichedParticipants = await Promise.all(
          conversation.participants.map(async (participant) => {
            const profile = await Profile.findOne({ userId: participant._id }).lean();
            const profilePhotoUrl = profile?.profilePhoto
              ? `/uploads/profile/${path.basename(profile.profilePhoto)}`
              : '/default-profile.jpg';

            return {
              ...participant,
              profilePhotoUrl,
            };
          })
        );

        return {
          ...conversation,
          participants: enrichedParticipants,
        };
      })
    );

    res.status(200).json(enhancedConversations);
  } catch (error) {
    console.error("Error fetching conversations:", error);
    res.status(500).json({ message: "Server error" });
  }
};

// Start or get conversation
exports.startConversation = async (req, res) => {
  try {
    const { participantId } = req.body;
    
    if (!participantId) {
      return res.status(400).json({ message: 'Participant ID is required' });
    }

    const participant = await User.findById(participantId);
    if (!participant) {
      return res.status(404).json({ message: 'Participant not found' });
    }

    let conversation = await Conversation.findOne({
      participants: { $all: [req.user._id, participantId] }
    });

    if (!conversation) {
      conversation = await Conversation.create({
        participants: [req.user._id, participantId]
      });
    }

    conversation = await conversation.populate({
      path: 'participants',
      select: 'name email image role',
      match: { _id: { $ne: req.user._id } }
    });

    res.json({ conversation });
  } catch (error) {
    console.error('Start conversation error:', error);
    res.status(500).json({ 
      message: 'Failed to start conversation', 
      error: error.message 
    });
  }
};

// Get messages
exports.getMessages = async (req, res) => {
  try {
    const messages = await Message.find({ 
      conversation: req.params.id 
    })
    .populate('sender', 'name image role')
    .sort({ createdAt: 1 });

    res.json({ messages });
  } catch (error) {
    console.error('Get messages error:', error);
    res.status(500).json({ 
      message: 'Failed to get messages', 
      error: error.message 
    });
  }
};

// Send message
exports.sendMessage = async (req, res) => {
  try {
    const { conversationId, content } = req.body;

    if (!conversationId || (!content && !req.file)) {
      return res.status(400).json({ 
        message: 'Conversation ID and content or file are required' 
      });
    }

    const conversation = await Conversation.findOne({
      _id: conversationId,
      participants: req.user._id
    });

    if (!conversation) {
      return res.status(404).json({ message: 'Conversation not found' });
    }

    const messageData = {
      conversation: conversationId,
      sender: req.user._id,
      content
    };

    if (req.file) {
      messageData.fileUrl = `/uploads/chat/${req.file.filename}`;
      messageData.fileType = req.file.mimetype;
    }

    const message = await Message.create(messageData);

    conversation.lastMessage = {
      content: content || (req.file ? 'File attachment' : ''),
      createdAt: new Date()
    };
    await conversation.save();

    const populatedMessage = await message.populate('sender', 'name image role');

    // Get the other participant
    const otherParticipant = conversation.participants.find(
      p => p.toString() !== req.user._id.toString()
    );

    // Create notification
    const notification = new Notification({
      recipient: otherParticipant,
      sender: req.user._id,
      type: 'message',
      content: `New message from ${req.user.name}`,
      relatedEntity: conversationId,
      onModel: 'Conversation'
    });
    await notification.save();

    // Emit socket events
    const io = req.app.get('io');
    io.to(conversationId).emit('receiveMessage', populatedMessage);
    io.to(otherParticipant.toString()).emit('newNotification', notification);

    res.json({ message: populatedMessage });
  } catch (error) {
    console.error('Send message error:', error);
    res.status(500).json({ 
      message: 'Failed to send message', 
      error: error.message 
    });
  }
}; */